{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonic\\\\OneDrive\\\\Documents\\\\FInal Version(Hopefully) for stella site\\\\stellabelessimovies\\\\src\\\\components\\\\Modal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './modal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal({\n  movie,\n  status,\n  toggleModal\n}) {\n  _s();\n  const [videoSrc, setVideoSrc] = useState(\"\");\n  const [savedTime, setSavedTime] = useState(0);\n  const iframeRef = useRef(null);\n  const intervalRef = useRef(null);\n\n  // Generate unique storage key for each movie\n  const getStorageKey = () => `video_time_${movie.id || movie.title.replace(/\\s+/g, '_')}`;\n  useEffect(() => {\n    if (status) {\n      // Load saved time from localStorage\n      const storageKey = getStorageKey();\n      const savedTimeFromStorage = parseFloat(localStorage.getItem(storageKey) || '0');\n      setSavedTime(savedTimeFromStorage);\n\n      // Build video URL with start time\n      let videoUrl = movie.video;\n\n      // Handle YouTube URLs\n      if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {\n        const timeParam = savedTimeFromStorage > 0 ? `&t=${Math.floor(savedTimeFromStorage)}s` : '';\n        const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\n        videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\n      }\n      // Handle Vimeo URLs\n      else if (videoUrl.includes('vimeo.com')) {\n        const timeParam = savedTimeFromStorage > 0 ? `#t=${Math.floor(savedTimeFromStorage)}s` : '';\n        const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\n        videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\n      }\n      // Handle other video sources\n      else {\n        const separator = videoUrl.includes(\"?\") ? \"&\" : \"?\";\n        const autoplayParam = `${separator}autoplay=1`;\n        const timeParam = savedTimeFromStorage > 0 ? `&t=${Math.floor(savedTimeFromStorage)}` : '';\n        videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\n      }\n      setVideoSrc(videoUrl);\n\n      // Start tracking time every 5 seconds (to avoid too frequent saves)\n      intervalRef.current = setInterval(() => {\n        saveCurrentTime();\n      }, 5000);\n    } else {\n      setVideoSrc(\"\");\n      // Clear the interval when modal closes\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      // Save final time when closing\n      saveCurrentTime();\n    }\n\n    // Cleanup interval on unmount\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [status, movie.video, movie.id, movie.title]);\n  const saveCurrentTime = () => {\n    // For YouTube/Vimeo iframes, we can't directly access current time due to CORS\n    // So we'll estimate based on how long the modal has been open\n    // This is a limitation of cross-origin iframes\n\n    // Alternative: Save timestamp when modal opens/closes for basic resume\n    if (status) {\n      const storageKey = getStorageKey();\n      const currentSavedTime = parseFloat(localStorage.getItem(storageKey) || '0');\n      // Add 5 seconds to the saved time (rough estimate)\n      localStorage.setItem(storageKey, (currentSavedTime + 5).toString());\n    }\n  };\n  const handleModalClose = () => {\n    // Save current estimated time before closing\n    saveCurrentTime();\n    toggleModal();\n  };\n  const resetVideoProgress = () => {\n    const storageKey = getStorageKey();\n    localStorage.removeItem(storageKey);\n    setSavedTime(0);\n    // Reload video from beginning\n    const autoplayUrl = movie.video.includes(\"?\") ? `${movie.video}&autoplay=1` : `${movie.video}?autoplay=1`;\n    setVideoSrc(autoplayUrl);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `movieModal ${status ? 'active' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#\",\n      className: \"modalClose\",\n      onClick: handleModalClose,\n      children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n        name: \"close-outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), status && savedTime > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resumeIndicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Resuming from \", Math.floor(savedTime / 60), \":\", (savedTime % 60).toFixed(0).padStart(2, '0')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetVideoProgress,\n        className: \"restartBtn\",\n        children: \"Start from beginning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), status && /*#__PURE__*/_jsxDEV(\"iframe\", {\n      ref: iframeRef,\n      width: \"1280\",\n      height: \"720\",\n      src: videoSrc,\n      title: `${movie.title} | Official Movie`,\n      frameBorder: \"0\",\n      allow: \"autoplay; accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"J61aIayomnbvVMm9cRlqfGuMccg=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","Modal","movie","status","toggleModal","_s","videoSrc","setVideoSrc","savedTime","setSavedTime","iframeRef","intervalRef","getStorageKey","id","title","replace","storageKey","savedTimeFromStorage","parseFloat","localStorage","getItem","videoUrl","video","includes","timeParam","Math","floor","autoplayParam","separator","current","setInterval","saveCurrentTime","clearInterval","currentSavedTime","setItem","toString","handleModalClose","resetVideoProgress","removeItem","autoplayUrl","className","children","href","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","padStart","ref","width","height","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["C:/Users/sonic/OneDrive/Documents/FInal Version(Hopefully) for stella site/stellabelessimovies/src/components/Modal.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './modal.css';\r\n\r\nfunction Modal({ movie, status, toggleModal }) {\r\n  const [videoSrc, setVideoSrc] = useState(\"\");\r\n  const [savedTime, setSavedTime] = useState(0);\r\n  const iframeRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n\r\n  // Generate unique storage key for each movie\r\n  const getStorageKey = () => `video_time_${movie.id || movie.title.replace(/\\s+/g, '_')}`;\r\n\r\n  useEffect(() => {\r\n    if (status) {\r\n      // Load saved time from localStorage\r\n      const storageKey = getStorageKey();\r\n      const savedTimeFromStorage = parseFloat(localStorage.getItem(storageKey) || '0');\r\n      setSavedTime(savedTimeFromStorage);\r\n\r\n      // Build video URL with start time\r\n      let videoUrl = movie.video;\r\n      \r\n      // Handle YouTube URLs\r\n      if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {\r\n        const timeParam = savedTimeFromStorage > 0 ? `&t=${Math.floor(savedTimeFromStorage)}s` : '';\r\n        const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\r\n        videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\r\n      } \r\n      // Handle Vimeo URLs\r\n      else if (videoUrl.includes('vimeo.com')) {\r\n        const timeParam = savedTimeFromStorage > 0 ? `#t=${Math.floor(savedTimeFromStorage)}s` : '';\r\n        const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\r\n        videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\r\n      }\r\n      // Handle other video sources\r\n      else {\r\n        const separator = videoUrl.includes(\"?\") ? \"&\" : \"?\";\r\n        const autoplayParam = `${separator}autoplay=1`;\r\n        const timeParam = savedTimeFromStorage > 0 ? `&t=${Math.floor(savedTimeFromStorage)}` : '';\r\n        videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\r\n      }\r\n\r\n      setVideoSrc(videoUrl);\r\n\r\n      // Start tracking time every 5 seconds (to avoid too frequent saves)\r\n      intervalRef.current = setInterval(() => {\r\n        saveCurrentTime();\r\n      }, 5000);\r\n\r\n    } else {\r\n      setVideoSrc(\"\");\r\n      // Clear the interval when modal closes\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n        intervalRef.current = null;\r\n      }\r\n      // Save final time when closing\r\n      saveCurrentTime();\r\n    }\r\n\r\n    // Cleanup interval on unmount\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, [status, movie.video, movie.id, movie.title]);\r\n\r\n  const saveCurrentTime = () => {\r\n    // For YouTube/Vimeo iframes, we can't directly access current time due to CORS\r\n    // So we'll estimate based on how long the modal has been open\r\n    // This is a limitation of cross-origin iframes\r\n    \r\n    // Alternative: Save timestamp when modal opens/closes for basic resume\r\n    if (status) {\r\n      const storageKey = getStorageKey();\r\n      const currentSavedTime = parseFloat(localStorage.getItem(storageKey) || '0');\r\n      // Add 5 seconds to the saved time (rough estimate)\r\n      localStorage.setItem(storageKey, (currentSavedTime + 5).toString());\r\n    }\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    // Save current estimated time before closing\r\n    saveCurrentTime();\r\n    toggleModal();\r\n  };\r\n\r\n  const resetVideoProgress = () => {\r\n    const storageKey = getStorageKey();\r\n    localStorage.removeItem(storageKey);\r\n    setSavedTime(0);\r\n    // Reload video from beginning\r\n    const autoplayUrl = movie.video.includes(\"?\")\r\n      ? `${movie.video}&autoplay=1`\r\n      : `${movie.video}?autoplay=1`;\r\n    setVideoSrc(autoplayUrl);\r\n  };\r\n\r\n  return (\r\n    <div className={`movieModal ${status ? 'active' : ''}`}>\r\n      <a href=\"#\" className=\"modalClose\" onClick={handleModalClose}>\r\n        <ion-icon name=\"close-outline\"></ion-icon>\r\n      </a>\r\n      \r\n      {/* Resume indicator */}\r\n      {status && savedTime > 0 && (\r\n        <div className=\"resumeIndicator\">\r\n          <p>Resuming from {Math.floor(savedTime / 60)}:{(savedTime % 60).toFixed(0).padStart(2, '0')}</p>\r\n          <button onClick={resetVideoProgress} className=\"restartBtn\">\r\n            Start from beginning\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {status && (\r\n        <iframe\r\n          ref={iframeRef}\r\n          width=\"1280\"\r\n          height=\"720\"\r\n          src={videoSrc}\r\n          title={`${movie.title} | Official Movie`}\r\n          frameBorder=\"0\"\r\n          allow=\"autoplay; accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}