{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonic\\\\OneDrive\\\\Documents\\\\FInal Version(Hopefully) for stella site\\\\stellabelessimovies\\\\src\\\\components\\\\Modal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './modal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Modal({\n  movie,\n  status,\n  toggleModal\n}) {\n  _s();\n  const [videoSrc, setVideoSrc] = useState(\"\");\n  const [resumeTime, setResumeTime] = useState(0);\n  const startTimeRef = useRef(null);\n  const pauseTimeRef = useRef(null);\n  const accumulatedTimeRef = useRef(0);\n  const getStorageKey = () => `movie_progress_${movie.id || movie.title.replace(/\\s+/g, '_')}`;\n  useEffect(() => {\n    if (status) {\n      // Load saved progress\n      const savedData = JSON.parse(localStorage.getItem(getStorageKey()) || '{}');\n      const savedTime = savedData.watchTime || 0;\n      setResumeTime(savedTime);\n      accumulatedTimeRef.current = savedTime;\n\n      // Start tracking\n      startTimeRef.current = Date.now();\n\n      // Build video URL with resume time\n      let videoUrl = movie.video;\n      if (savedTime > 0) {\n        if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {\n          const timeParam = `&t=${Math.floor(savedTime)}s`;\n          const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\n          videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\n        } else if (videoUrl.includes('vimeo.com')) {\n          const timeParam = `#t=${Math.floor(savedTime)}s`;\n          const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\n          videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\n        } else {\n          const separator = videoUrl.includes(\"?\") ? \"&\" : \"?\";\n          videoUrl = `${movie.video}${separator}autoplay=1&t=${Math.floor(savedTime)}`;\n        }\n      } else {\n        const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\n        videoUrl = `${movie.video}${autoplayParam}`;\n      }\n      setVideoSrc(videoUrl);\n\n      // Save progress periodically\n      const saveInterval = setInterval(() => {\n        saveProgress();\n      }, 10000); // Save every 10 seconds\n\n      // Handle page visibility changes\n      const handleVisibilityChange = () => {\n        if (document.hidden) {\n          pauseTimeRef.current = Date.now();\n        } else {\n          if (pauseTimeRef.current && startTimeRef.current) {\n            // Don't count time when page was hidden\n            startTimeRef.current += Date.now() - pauseTimeRef.current;\n          }\n        }\n      };\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n      return () => {\n        clearInterval(saveInterval);\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n        saveProgress();\n      };\n    } else {\n      saveProgress();\n      setVideoSrc(\"\");\n    }\n  }, [status, movie]);\n  const saveProgress = () => {\n    if (startTimeRef.current) {\n      const currentSessionTime = Math.floor((Date.now() - startTimeRef.current) / 1000);\n      const totalWatchTime = accumulatedTimeRef.current + currentSessionTime;\n      const progressData = {\n        watchTime: totalWatchTime,\n        lastWatched: new Date().toISOString(),\n        movieTitle: movie.title,\n        totalSessions: (JSON.parse(localStorage.getItem(getStorageKey()) || '{}').totalSessions || 0) + 1\n      };\n      localStorage.setItem(getStorageKey(), JSON.stringify(progressData));\n      accumulatedTimeRef.current = totalWatchTime;\n      startTimeRef.current = Date.now();\n    }\n  };\n  const handleClose = () => {\n    saveProgress();\n    toggleModal();\n  };\n  const restartMovie = () => {\n    localStorage.removeItem(getStorageKey());\n    setResumeTime(0);\n    accumulatedTimeRef.current = 0;\n    startTimeRef.current = Date.now();\n    const autoplayParam = movie.video.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\n    setVideoSrc(`${movie.video}${autoplayParam}`);\n  };\n  const formatDuration = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    }\n    return `${minutes}m ${secs}s`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `movieModal ${status ? 'active' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#\",\n      className: \"modalClose\",\n      onClick: handleClose,\n      children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n        name: \"close-outline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), status && resumeTime > 60 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resumeIndicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resumeInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"ion-icon\", {\n          name: \"play-circle-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Resume from \", formatDuration(resumeTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartMovie,\n        className: \"restartBtn\",\n        children: [/*#__PURE__*/_jsxDEV(\"ion-icon\", {\n          name: \"refresh-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), \"Start Over\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), status && /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"1280\",\n      height: \"720\",\n      src: videoSrc,\n      title: `${movie.title} | Official Movie`,\n      frameBorder: \"0\",\n      allow: \"autoplay; accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Modal, \"wRuk6BxtS1Xg5Jivav0Use6UCgY=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","Modal","movie","status","toggleModal","_s","videoSrc","setVideoSrc","resumeTime","setResumeTime","startTimeRef","pauseTimeRef","accumulatedTimeRef","getStorageKey","id","title","replace","savedData","JSON","parse","localStorage","getItem","savedTime","watchTime","current","Date","now","videoUrl","video","includes","timeParam","Math","floor","autoplayParam","separator","saveInterval","setInterval","saveProgress","handleVisibilityChange","document","hidden","addEventListener","clearInterval","removeEventListener","currentSessionTime","totalWatchTime","progressData","lastWatched","toISOString","movieTitle","totalSessions","setItem","stringify","handleClose","restartMovie","removeItem","formatDuration","seconds","hours","minutes","secs","className","children","href","onClick","name","fileName","_jsxFileName","lineNumber","columnNumber","width","height","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["C:/Users/sonic/OneDrive/Documents/FInal Version(Hopefully) for stella site/stellabelessimovies/src/components/Modal.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './modal.css';\r\n\r\nfunction Modal({ movie, status, toggleModal }) {\r\n  const [videoSrc, setVideoSrc] = useState(\"\");\r\n  const [resumeTime, setResumeTime] = useState(0);\r\n  const startTimeRef = useRef(null);\r\n  const pauseTimeRef = useRef(null);\r\n  const accumulatedTimeRef = useRef(0);\r\n\r\n  const getStorageKey = () => `movie_progress_${movie.id || movie.title.replace(/\\s+/g, '_')}`;\r\n\r\n  useEffect(() => {\r\n    if (status) {\r\n      // Load saved progress\r\n      const savedData = JSON.parse(localStorage.getItem(getStorageKey()) || '{}');\r\n      const savedTime = savedData.watchTime || 0;\r\n      setResumeTime(savedTime);\r\n      accumulatedTimeRef.current = savedTime;\r\n\r\n      // Start tracking\r\n      startTimeRef.current = Date.now();\r\n\r\n      // Build video URL with resume time\r\n      let videoUrl = movie.video;\r\n      if (savedTime > 0) {\r\n        if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {\r\n          const timeParam = `&t=${Math.floor(savedTime)}s`;\r\n          const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\r\n          videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\r\n        } else if (videoUrl.includes('vimeo.com')) {\r\n          const timeParam = `#t=${Math.floor(savedTime)}s`;\r\n          const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\r\n          videoUrl = `${movie.video}${autoplayParam}${timeParam}`;\r\n        } else {\r\n          const separator = videoUrl.includes(\"?\") ? \"&\" : \"?\";\r\n          videoUrl = `${movie.video}${separator}autoplay=1&t=${Math.floor(savedTime)}`;\r\n        }\r\n      } else {\r\n        const autoplayParam = videoUrl.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\r\n        videoUrl = `${movie.video}${autoplayParam}`;\r\n      }\r\n\r\n      setVideoSrc(videoUrl);\r\n\r\n      // Save progress periodically\r\n      const saveInterval = setInterval(() => {\r\n        saveProgress();\r\n      }, 10000); // Save every 10 seconds\r\n\r\n      // Handle page visibility changes\r\n      const handleVisibilityChange = () => {\r\n        if (document.hidden) {\r\n          pauseTimeRef.current = Date.now();\r\n        } else {\r\n          if (pauseTimeRef.current && startTimeRef.current) {\r\n            // Don't count time when page was hidden\r\n            startTimeRef.current += (Date.now() - pauseTimeRef.current);\r\n          }\r\n        }\r\n      };\r\n\r\n      document.addEventListener('visibilitychange', handleVisibilityChange);\r\n\r\n      return () => {\r\n        clearInterval(saveInterval);\r\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n        saveProgress();\r\n      };\r\n    } else {\r\n      saveProgress();\r\n      setVideoSrc(\"\");\r\n    }\r\n  }, [status, movie]);\r\n\r\n  const saveProgress = () => {\r\n    if (startTimeRef.current) {\r\n      const currentSessionTime = Math.floor((Date.now() - startTimeRef.current) / 1000);\r\n      const totalWatchTime = accumulatedTimeRef.current + currentSessionTime;\r\n      \r\n      const progressData = {\r\n        watchTime: totalWatchTime,\r\n        lastWatched: new Date().toISOString(),\r\n        movieTitle: movie.title,\r\n        totalSessions: (JSON.parse(localStorage.getItem(getStorageKey()) || '{}').totalSessions || 0) + 1\r\n      };\r\n\r\n      localStorage.setItem(getStorageKey(), JSON.stringify(progressData));\r\n      accumulatedTimeRef.current = totalWatchTime;\r\n      startTimeRef.current = Date.now();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    saveProgress();\r\n    toggleModal();\r\n  };\r\n\r\n  const restartMovie = () => {\r\n    localStorage.removeItem(getStorageKey());\r\n    setResumeTime(0);\r\n    accumulatedTimeRef.current = 0;\r\n    startTimeRef.current = Date.now();\r\n    \r\n    const autoplayParam = movie.video.includes(\"?\") ? \"&autoplay=1\" : \"?autoplay=1\";\r\n    setVideoSrc(`${movie.video}${autoplayParam}`);\r\n  };\r\n\r\n  const formatDuration = (seconds) => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    \r\n    if (hours > 0) {\r\n      return `${hours}h ${minutes}m ${secs}s`;\r\n    }\r\n    return `${minutes}m ${secs}s`;\r\n  };\r\n\r\n  return (\r\n    <div className={`movieModal ${status ? 'active' : ''}`}>\r\n      <a href=\"#\" className=\"modalClose\" onClick={handleClose}>\r\n        <ion-icon name=\"close-outline\"></ion-icon>\r\n      </a>\r\n      \r\n      {status && resumeTime > 60 && (\r\n        <div className=\"resumeIndicator\">\r\n          <div className=\"resumeInfo\">\r\n            <ion-icon name=\"play-circle-outline\"></ion-icon>\r\n            <p>Resume from {formatDuration(resumeTime)}</p>\r\n          </div>\r\n          <button onClick={restartMovie} className=\"restartBtn\">\r\n            <ion-icon name=\"refresh-outline\"></ion-icon>\r\n            Start Over\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {status && (\r\n        <iframe\r\n          width=\"1280\"\r\n          height=\"720\"\r\n          src={videoSrc}\r\n          title={`${movie.title} | Official Movie`}\r\n          frameBorder=\"0\"\r\n          allow=\"autoplay; accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,SAASC,KAAKA,CAAC;EAAEC,KAAK;EAAEC,MAAM;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAMa,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMa,YAAY,GAAGb,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMc,kBAAkB,GAAGd,MAAM,CAAC,CAAC,CAAC;EAEpC,MAAMe,aAAa,GAAGA,CAAA,KAAO,kBAAiBX,KAAK,CAACY,EAAE,IAAIZ,KAAK,CAACa,KAAK,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAE,EAAC;EAE5FpB,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,EAAE;MACV;MACA,MAAMc,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,aAAa,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;MAC3E,MAAMS,SAAS,GAAGL,SAAS,CAACM,SAAS,IAAI,CAAC;MAC1Cd,aAAa,CAACa,SAAS,CAAC;MACxBV,kBAAkB,CAACY,OAAO,GAAGF,SAAS;;MAEtC;MACAZ,YAAY,CAACc,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;;MAEjC;MACA,IAAIC,QAAQ,GAAGzB,KAAK,CAAC0B,KAAK;MAC1B,IAAIN,SAAS,GAAG,CAAC,EAAE;QACjB,IAAIK,QAAQ,CAACE,QAAQ,CAAC,aAAa,CAAC,IAAIF,QAAQ,CAACE,QAAQ,CAAC,UAAU,CAAC,EAAE;UACrE,MAAMC,SAAS,GAAI,MAAKC,IAAI,CAACC,KAAK,CAACV,SAAS,CAAE,GAAE;UAChD,MAAMW,aAAa,GAAGN,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAG,aAAa,GAAG,aAAa;UAC5EF,QAAQ,GAAI,GAAEzB,KAAK,CAAC0B,KAAM,GAAEK,aAAc,GAAEH,SAAU,EAAC;QACzD,CAAC,MAAM,IAAIH,QAAQ,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;UACzC,MAAMC,SAAS,GAAI,MAAKC,IAAI,CAACC,KAAK,CAACV,SAAS,CAAE,GAAE;UAChD,MAAMW,aAAa,GAAGN,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAG,aAAa,GAAG,aAAa;UAC5EF,QAAQ,GAAI,GAAEzB,KAAK,CAAC0B,KAAM,GAAEK,aAAc,GAAEH,SAAU,EAAC;QACzD,CAAC,MAAM;UACL,MAAMI,SAAS,GAAGP,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;UACpDF,QAAQ,GAAI,GAAEzB,KAAK,CAAC0B,KAAM,GAAEM,SAAU,gBAAeH,IAAI,CAACC,KAAK,CAACV,SAAS,CAAE,EAAC;QAC9E;MACF,CAAC,MAAM;QACL,MAAMW,aAAa,GAAGN,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,GAAG,aAAa,GAAG,aAAa;QAC5EF,QAAQ,GAAI,GAAEzB,KAAK,CAAC0B,KAAM,GAAEK,aAAc,EAAC;MAC7C;MAEA1B,WAAW,CAACoB,QAAQ,CAAC;;MAErB;MACA,MAAMQ,YAAY,GAAGC,WAAW,CAAC,MAAM;QACrCC,YAAY,CAAC,CAAC;MAChB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAEX;MACA,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;QACnC,IAAIC,QAAQ,CAACC,MAAM,EAAE;UACnB7B,YAAY,CAACa,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;QACnC,CAAC,MAAM;UACL,IAAIf,YAAY,CAACa,OAAO,IAAId,YAAY,CAACc,OAAO,EAAE;YAChD;YACAd,YAAY,CAACc,OAAO,IAAKC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGf,YAAY,CAACa,OAAQ;UAC7D;QACF;MACF,CAAC;MAEDe,QAAQ,CAACE,gBAAgB,CAAC,kBAAkB,EAAEH,sBAAsB,CAAC;MAErE,OAAO,MAAM;QACXI,aAAa,CAACP,YAAY,CAAC;QAC3BI,QAAQ,CAACI,mBAAmB,CAAC,kBAAkB,EAAEL,sBAAsB,CAAC;QACxED,YAAY,CAAC,CAAC;MAChB,CAAC;IACH,CAAC,MAAM;MACLA,YAAY,CAAC,CAAC;MACd9B,WAAW,CAAC,EAAE,CAAC;IACjB;EACF,CAAC,EAAE,CAACJ,MAAM,EAAED,KAAK,CAAC,CAAC;EAEnB,MAAMmC,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI3B,YAAY,CAACc,OAAO,EAAE;MACxB,MAAMoB,kBAAkB,GAAGb,IAAI,CAACC,KAAK,CAAC,CAACP,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGhB,YAAY,CAACc,OAAO,IAAI,IAAI,CAAC;MACjF,MAAMqB,cAAc,GAAGjC,kBAAkB,CAACY,OAAO,GAAGoB,kBAAkB;MAEtE,MAAME,YAAY,GAAG;QACnBvB,SAAS,EAAEsB,cAAc;QACzBE,WAAW,EAAE,IAAItB,IAAI,CAAC,CAAC,CAACuB,WAAW,CAAC,CAAC;QACrCC,UAAU,EAAE/C,KAAK,CAACa,KAAK;QACvBmC,aAAa,EAAE,CAAChC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACR,aAAa,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAACqC,aAAa,IAAI,CAAC,IAAI;MAClG,CAAC;MAED9B,YAAY,CAAC+B,OAAO,CAACtC,aAAa,CAAC,CAAC,EAAEK,IAAI,CAACkC,SAAS,CAACN,YAAY,CAAC,CAAC;MACnElC,kBAAkB,CAACY,OAAO,GAAGqB,cAAc;MAC3CnC,YAAY,CAACc,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACnC;EACF,CAAC;EAED,MAAM2B,WAAW,GAAGA,CAAA,KAAM;IACxBhB,YAAY,CAAC,CAAC;IACdjC,WAAW,CAAC,CAAC;EACf,CAAC;EAED,MAAMkD,YAAY,GAAGA,CAAA,KAAM;IACzBlC,YAAY,CAACmC,UAAU,CAAC1C,aAAa,CAAC,CAAC,CAAC;IACxCJ,aAAa,CAAC,CAAC,CAAC;IAChBG,kBAAkB,CAACY,OAAO,GAAG,CAAC;IAC9Bd,YAAY,CAACc,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAEjC,MAAMO,aAAa,GAAG/B,KAAK,CAAC0B,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAG,aAAa,GAAG,aAAa;IAC/EtB,WAAW,CAAE,GAAEL,KAAK,CAAC0B,KAAM,GAAEK,aAAc,EAAC,CAAC;EAC/C,CAAC;EAED,MAAMuB,cAAc,GAAIC,OAAO,IAAK;IAClC,MAAMC,KAAK,GAAG3B,IAAI,CAACC,KAAK,CAACyB,OAAO,GAAG,IAAI,CAAC;IACxC,MAAME,OAAO,GAAG5B,IAAI,CAACC,KAAK,CAAEyB,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;IACjD,MAAMG,IAAI,GAAGH,OAAO,GAAG,EAAE;IAEzB,IAAIC,KAAK,GAAG,CAAC,EAAE;MACb,OAAQ,GAAEA,KAAM,KAAIC,OAAQ,KAAIC,IAAK,GAAE;IACzC;IACA,OAAQ,GAAED,OAAQ,KAAIC,IAAK,GAAE;EAC/B,CAAC;EAED,oBACE5D,OAAA;IAAK6D,SAAS,EAAG,cAAa1D,MAAM,GAAG,QAAQ,GAAG,EAAG,EAAE;IAAA2D,QAAA,gBACrD9D,OAAA;MAAG+D,IAAI,EAAC,GAAG;MAACF,SAAS,EAAC,YAAY;MAACG,OAAO,EAAEX,WAAY;MAAAS,QAAA,eACtD9D,OAAA;QAAUiE,IAAI,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,EAEHlE,MAAM,IAAIK,UAAU,GAAG,EAAE,iBACxBR,OAAA;MAAK6D,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9B9D,OAAA;QAAK6D,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB9D,OAAA;UAAUiE,IAAI,EAAC;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAChDrE,OAAA;UAAA8D,QAAA,GAAG,cAAY,EAACN,cAAc,CAAChD,UAAU,CAAC;QAAA;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACNrE,OAAA;QAAQgE,OAAO,EAAEV,YAAa;QAACO,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACnD9D,OAAA;UAAUiE,IAAI,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,cAE9C;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAEAlE,MAAM,iBACLH,OAAA;MACEsE,KAAK,EAAC,MAAM;MACZC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAElE,QAAS;MACdS,KAAK,EAAG,GAAEb,KAAK,CAACa,KAAM,mBAAmB;MACzC0D,WAAW,EAAC,GAAG;MACfC,KAAK,EAAC,qGAAqG;MAC3GC,eAAe;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACV;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChE,EAAA,CApJQJ,KAAK;AAAA2E,EAAA,GAAL3E,KAAK;AAsJd,eAAeA,KAAK;AAAC,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}