{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonic\\\\OneDrive\\\\Documents\\\\FInal Version(Hopefully) for stella site\\\\stellabelessimovies\\\\src\\\\components\\\\MovieSwiper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './movieSwiper.css';\nimport 'swiper/css';\nimport 'swiper/css/effect-coverflow';\nimport 'swiper/css/free-mode';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Autoplay, EffectCoverflow, FreeMode } from 'swiper/modules';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieSwiper({\n  slides,\n  slideChange\n}) {\n  _s();\n  const [tapPosition, setTapPosition] = useState(null);\n  const [swipeOverlay, setSwipeOverlay] = useState(null); // for swipe HUD\n  const swipeStartRef = useRef(null);\n  const swipeTimeRef = useRef(null);\n\n  /* Handle tap / click */\n  const handleClick = (slideId, e) => {\n    slideChange(slideId);\n    const rect = e.currentTarget.getBoundingClientRect();\n    let x, y;\n    if (e.touches && e.touches[0]) {\n      x = e.touches[0].clientX - rect.left;\n      y = e.touches[0].clientY - rect.top;\n    } else {\n      x = e.clientX - rect.left;\n      y = e.clientY - rect.top;\n    }\n    setTapPosition({\n      x,\n      y\n    });\n    setTimeout(() => setTapPosition(null), 500);\n  };\n\n  /* Swipe gestures */\n  const handleTouchStart = e => {\n    const touch = e.touches[0];\n    swipeStartRef.current = {\n      x: touch.clientX,\n      y: touch.clientY\n    };\n    swipeTimeRef.current = Date.now();\n    setSwipeOverlay({\n      dx: 0,\n      dy: 0,\n      angle: 0,\n      velocity: 0\n    });\n  };\n  const handleTouchMove = e => {\n    if (!swipeStartRef.current) return;\n    const touch = e.touches[0];\n    const dx = touch.clientX - swipeStartRef.current.x;\n    const dy = touch.clientY - swipeStartRef.current.y;\n    const dt = (Date.now() - swipeTimeRef.current) / 1000;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    const velocity = distance / dt;\n    setSwipeOverlay({\n      dx,\n      dy,\n      angle,\n      velocity\n    });\n  };\n  const handleTouchEnd = () => {\n    setSwipeOverlay(null);\n    swipeStartRef.current = null;\n    swipeTimeRef.current = null;\n  };\n  return /*#__PURE__*/_jsxDEV(Swiper, {\n    modules: [EffectCoverflow, Autoplay, FreeMode],\n    effect: \"coverflow\",\n    grabCursor: true,\n    centeredSlides: true,\n    slidesPerView: \"auto\",\n    loop: true,\n    loopedSlides: slides.length,\n    freeMode: {\n      enabled: true,\n      momentum: true\n    },\n    autoplay: {\n      delay: 2500,\n      disableOnInteraction: false\n    },\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      modifier: 1,\n      slideShadows: true\n    },\n    touchRatio: 2.5,\n    threshold: 5,\n    resistance: true,\n    resistanceRatio: 0.85,\n    className: \"movieSwiper\",\n    children: [slides.map(slide => /*#__PURE__*/_jsxDEV(SwiperSlide, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slide-content\",\n        onClick: e => handleClick(slide._id, e),\n        onTouchStart: e => {\n          handleClick(slide._id, e);\n          handleTouchStart(e);\n        },\n        onTouchMove: handleTouchMove,\n        onTouchEnd: handleTouchEnd,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: slide.previewImg,\n          alt: \"Preview\",\n          draggable: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), tapPosition && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tap-indicator\",\n          style: {\n            left: tapPosition.x,\n            top: tapPosition.y\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this), swipeOverlay && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"swipe-hud\",\n          style: {\n            transform: `translate(${swipeOverlay.dx}px, ${swipeOverlay.dy}px) rotate(${swipeOverlay.angle}deg)`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, slide._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"swipe-hint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieSwiper, \"EPF6lerewGn6oqkor7+UpRlwVbk=\");\n_c = MovieSwiper;\nexport default MovieSwiper;\nvar _c;\n$RefreshReg$(_c, \"MovieSwiper\");","map":{"version":3,"names":["React","useState","useRef","Swiper","SwiperSlide","Autoplay","EffectCoverflow","FreeMode","jsxDEV","_jsxDEV","MovieSwiper","slides","slideChange","_s","tapPosition","setTapPosition","swipeOverlay","setSwipeOverlay","swipeStartRef","swipeTimeRef","handleClick","slideId","e","rect","currentTarget","getBoundingClientRect","x","y","touches","clientX","left","clientY","top","setTimeout","handleTouchStart","touch","current","Date","now","dx","dy","angle","velocity","handleTouchMove","dt","distance","Math","sqrt","atan2","PI","handleTouchEnd","modules","effect","grabCursor","centeredSlides","slidesPerView","loop","loopedSlides","length","freeMode","enabled","momentum","autoplay","delay","disableOnInteraction","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","touchRatio","threshold","resistance","resistanceRatio","className","children","map","slide","onClick","_id","onTouchStart","onTouchMove","onTouchEnd","src","previewImg","alt","draggable","fileName","_jsxFileName","lineNumber","columnNumber","style","transform","_c","$RefreshReg$"],"sources":["C:/Users/sonic/OneDrive/Documents/FInal Version(Hopefully) for stella site/stellabelessimovies/src/components/MovieSwiper.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './movieSwiper.css';\r\nimport 'swiper/css';\r\nimport 'swiper/css/effect-coverflow';\r\nimport 'swiper/css/free-mode';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport { Autoplay, EffectCoverflow, FreeMode } from 'swiper/modules';\r\n\r\nfunction MovieSwiper({ slides, slideChange }) {\r\n  const [tapPosition, setTapPosition] = useState(null);\r\n  const [swipeOverlay, setSwipeOverlay] = useState(null); // for swipe HUD\r\n  const swipeStartRef = useRef(null);\r\n  const swipeTimeRef = useRef(null);\r\n\r\n  /* Handle tap / click */\r\n  const handleClick = (slideId, e) => {\r\n    slideChange(slideId);\r\n\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    let x, y;\r\n    if (e.touches && e.touches[0]) {\r\n      x = e.touches[0].clientX - rect.left;\r\n      y = e.touches[0].clientY - rect.top;\r\n    } else {\r\n      x = e.clientX - rect.left;\r\n      y = e.clientY - rect.top;\r\n    }\r\n    setTapPosition({ x, y });\r\n    setTimeout(() => setTapPosition(null), 500);\r\n  };\r\n\r\n  /* Swipe gestures */\r\n  const handleTouchStart = (e) => {\r\n    const touch = e.touches[0];\r\n    swipeStartRef.current = { x: touch.clientX, y: touch.clientY };\r\n    swipeTimeRef.current = Date.now();\r\n    setSwipeOverlay({ dx: 0, dy: 0, angle: 0, velocity: 0 });\r\n  };\r\n\r\n  const handleTouchMove = (e) => {\r\n    if (!swipeStartRef.current) return;\r\n    const touch = e.touches[0];\r\n    const dx = touch.clientX - swipeStartRef.current.x;\r\n    const dy = touch.clientY - swipeStartRef.current.y;\r\n    const dt = (Date.now() - swipeTimeRef.current) / 1000;\r\n    const distance = Math.sqrt(dx*dx + dy*dy);\r\n    const angle = Math.atan2(dy, dx) * (180/Math.PI);\r\n    const velocity = distance / dt;\r\n    setSwipeOverlay({ dx, dy, angle, velocity });\r\n  };\r\n\r\n  const handleTouchEnd = () => {\r\n    setSwipeOverlay(null);\r\n    swipeStartRef.current = null;\r\n    swipeTimeRef.current = null;\r\n  };\r\n\r\n  return (\r\n    <Swiper\r\n      modules={[EffectCoverflow, Autoplay, FreeMode]}\r\n      effect=\"coverflow\"\r\n      grabCursor={true}\r\n      centeredSlides={true}\r\n      slidesPerView=\"auto\"\r\n      loop={true}\r\n      loopedSlides={slides.length}\r\n      freeMode={{ enabled: true, momentum: true }}\r\n      autoplay={{ delay: 2500, disableOnInteraction: false }}\r\n      coverflowEffect={{ rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: true }}\r\n      touchRatio={2.5}\r\n      threshold={5}\r\n      resistance={true}\r\n      resistanceRatio={0.85}\r\n      className=\"movieSwiper\"\r\n    >\r\n      {slides.map(slide => (\r\n        <SwiperSlide key={slide._id}>\r\n          <div\r\n            className=\"slide-content\"\r\n            onClick={(e) => handleClick(slide._id, e)}\r\n            onTouchStart={(e) => { handleClick(slide._id, e); handleTouchStart(e); }}\r\n            onTouchMove={handleTouchMove}\r\n            onTouchEnd={handleTouchEnd}\r\n          >\r\n            <img src={slide.previewImg} alt=\"Preview\" draggable={false} />\r\n            {tapPosition && <div className=\"tap-indicator\" style={{ left: tapPosition.x, top: tapPosition.y }} />}\r\n            {swipeOverlay && <div className=\"swipe-hud\" style={{ transform: `translate(${swipeOverlay.dx}px, ${swipeOverlay.dy}px) rotate(${swipeOverlay.angle}deg)` }} />}\r\n          </div>\r\n        </SwiperSlide>\r\n      ))}\r\n      <div className=\"swipe-hint\" />\r\n    </Swiper>\r\n  );\r\n}\r\n\r\nexport default MovieSwiper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}