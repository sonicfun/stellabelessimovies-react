{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sonic\\\\OneDrive\\\\Documents\\\\stella belessi new website\\\\prototyping\\\\movie-website\\\\src\\\\pages\\\\MoviePoster.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './moviePoster.css';\nimport Card from '../components/Card';\n\n//This javascript function is used for the buttons. The first is active as it shows all the movie posters \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoviePoster() {\n  _s();\n  const filterList = [{\n    _id: 1,\n    name: 'All',\n    active: true\n  }, {\n    _id: 2,\n    name: 'Drama',\n    active: false\n  }, {\n    _id: 3,\n    name: 'Comedy',\n    active: false\n  }, {\n    _id: 4,\n    name: 'Thriller',\n    active: false\n  }, {\n    _id: 5,\n    name: 'Horror',\n    active: false\n  }, {\n    _id: 6,\n    name: 'Adventure',\n    active: false\n  }];\n\n  //These are the javascript constants for the data, movies and filters\n  const [data, setData] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [filters, setFilters] = useState(filterList);\n\n  //This is a fetch to collect the movie data from the folder data and the moviedata json!\n  const fetchData = () => {\n    fetch('http://localhost:3000/data/movieData.json').then(res => res.json()).then(data => setData(data)).catch(e => console.log(e.message));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    setMovies(data);\n  }, [data]);\n\n  //This is a constant which communicates with the filters!\n  const handleFilterMovies = category => {\n    setFilters(filters.map(filter => {\n      filter.active = false;\n      if (filter.name === category) {\n        filter.active = true;\n      }\n      return filter;\n    }));\n    if (category === 'All') {\n      setMovies(data);\n      return;\n    }\n    setMovies(data.filter(movie => movie.category === category));\n  };\n\n  //This is both the skeleton and react scropt which shows the section and \n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"movieposter\",\n    className: \"movieposter\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"section-title\",\n          children: \"Available Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"filters\",\n          children: filters.map(filter => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `${filter.active ? 'active' : undefined}`,\n            onClick: () => {\n              handleFilterMovies(filter.name);\n            },\n            children: filter.name\n          }, filter._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row mt-5\",\n        children: movies && movies.length > 0 && movies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n          movie: movie\n        }, movie._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n}\n_s(MoviePoster, \"eB1qu77OyC1+GUXbdwkrkTxAyqQ=\");\n_c = MoviePoster;\nexport default MoviePoster;\nvar _c;\n$RefreshReg$(_c, \"MoviePoster\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","MoviePoster","_s","filterList","_id","name","active","data","setData","movies","setMovies","filters","setFilters","fetchData","fetch","then","res","json","catch","e","console","log","message","handleFilterMovies","category","map","filter","movie","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","undefined","onClick","length","_c","$RefreshReg$"],"sources":["C:/Users/sonic/OneDrive/Documents/stella belessi new website/prototyping/movie-website/src/pages/MoviePoster.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './moviePoster.css';\r\nimport Card from '../components/Card';\r\n\r\n\r\n //This javascript function is used for the buttons. The first is active as it shows all the movie posters \r\nfunction MoviePoster() {\r\n     const filterList = [\r\n      {\r\n        _id: 1,\r\n        name: 'All',\r\n        active: true,\r\n      },\r\n      {\r\n        _id: 2,\r\n        name: 'Drama',\r\n        active: false,\r\n      },\r\n      {\r\n        _id: 3,\r\n        name: 'Comedy',\r\n        active: false,\r\n      },\r\n      {\r\n        _id: 4,\r\n        name: 'Thriller',\r\n        active: false,\r\n      },\r\n      {\r\n        _id: 5,\r\n        name: 'Horror',\r\n        active: false,\r\n      },\r\n      {\r\n        _id: 6,\r\n        name: 'Adventure',\r\n        active: false,\r\n      },\r\n     ];\r\n\r\n\r\n //These are the javascript constants for the data, movies and filters\r\n    const [data, setData] =useState([]);\r\n    const [movies, setMovies]= useState([]);\r\n    const [filters, setFilters] = useState(filterList);\r\n\r\n\r\n     //This is a fetch to collect the movie data from the folder data and the moviedata json!\r\n    const fetchData = () =>{\r\n        fetch('http://localhost:3000/data/movieData.json')\r\n        .then(res=>res.json())\r\n        .then(data =>setData(data))\r\n        .catch(e => console.log(e.message));\r\n    };\r\n\r\n    useEffect( ()=>{\r\n      fetchData();\r\n    }, []);\r\n\r\n    useEffect(() =>{\r\n      setMovies(data);\r\n    }, [data]);\r\n\r\n\r\n\r\n //This is a constant which communicates with the filters!\r\n    const handleFilterMovies = category => {\r\n       setFilters(\r\n        filters.map(filter => {\r\n          filter.active = false;\r\n            if (filter.name === category) {\r\n              filter.active = true;\r\n            }\r\n            return filter;\r\n            })\r\n       );\r\n\r\n\r\n        if(category==='All'){\r\n            setMovies(data);\r\n            return;\r\n        }\r\n       setMovies(data.filter(movie => movie.category === category));\r\n    };\r\n     \r\n\r\n     //This is both the skeleton and react scropt which shows the section and \r\n    return (\r\n      <section id=\"movieposter\" className='movieposter'>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <h4 className=\"section-title\">Available Now</h4>\r\n            </div>\r\n            <div className=\"row\">\r\n                 <ul className=\"filters\">\r\n                    {filters.map(filter => (\r\n                        <li \r\n                        key={filter._id}\r\n                        className={`${filter.active ? 'active' :undefined}`}\r\n                        onClick={() => {\r\n                            handleFilterMovies(filter.name);\r\n                        }}\r\n                        >\r\n                            {filter.name}</li>\r\n                    ))}\r\n                 </ul>\r\n            </div>\r\n            <div className=\"row mt-5\">\r\n                {movies && \r\n                movies.length> 0 && \r\n                movies.map(movie => <Card key={movie._id} movie={movie} />)}\r\n            </div>\r\n        </div>\r\n      </section> \r\n    );\r\n}\r\n\r\nexport default MoviePoster;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}