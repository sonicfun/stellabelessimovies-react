{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./movieSwiper.css';import'swiper/css';import'swiper/css/effect-coverflow';import'swiper/css/free-mode';import{Swiper,SwiperSlide}from'swiper/react';import{Autoplay,EffectCoverflow,FreeMode}from'swiper/modules';import{jsx as _jsx}from\"react/jsx-runtime\";function MovieSwiper(_ref){let{slides,slideChange,isModalOpen}=_ref;const[loadedSlides,setLoadedSlides]=useState({});const swiperRef=useRef(null);// Mark slide as loaded\nconst handleImageLoad=id=>{setLoadedSlides(prev=>({...prev,[id]:true}));};// Control autoplay based on modal state\nuseEffect(()=>{if(swiperRef.current&&swiperRef.current.swiper){const swiper=swiperRef.current.swiper;if(isModalOpen){swiper.autoplay.stop();}else{// Small delay to ensure modal is fully closed before resuming\nsetTimeout(()=>{if(swiper.autoplay&&!swiper.destroyed){swiper.autoplay.start();}},100);}}},[isModalOpen]);return/*#__PURE__*/_jsx(Swiper,{ref:swiperRef,modules:[EffectCoverflow,Autoplay,FreeMode],effect:\"coverflow\",grabCursor:true,centeredSlides:true,slidesPerView:\"auto\",loop:true,loopedSlides:Math.min(slides.length,10),freeMode:{enabled:true,momentum:true},autoplay:{delay:2500,disableOnInteraction:false},coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:true},touchRatio:1,threshold:10,resistance:true,resistanceRatio:0.85,touchStartPreventDefault:false,className:\"movieSwiper\",onSlideChange:swiper=>{const activeSlide=slides[swiper.realIndex];if(activeSlide)slideChange(activeSlide._id);},children:slides.map(slide=>/*#__PURE__*/_jsx(SwiperSlide,{children:/*#__PURE__*/_jsx(\"div\",{className:\"slide-content\",onClick:()=>slideChange(slide._id),children:/*#__PURE__*/_jsx(\"img\",{src:slide.previewImg,alt:slide.title||'Preview',draggable:false,onLoad:()=>handleImageLoad(slide._id),className:loadedSlides[slide._id]?'loaded':'loading'})})},slide._id))});}export default MovieSwiper;","map":{"version":3,"names":["React","useState","useEffect","useRef","Swiper","SwiperSlide","Autoplay","EffectCoverflow","FreeMode","jsx","_jsx","MovieSwiper","_ref","slides","slideChange","isModalOpen","loadedSlides","setLoadedSlides","swiperRef","handleImageLoad","id","prev","current","swiper","autoplay","stop","setTimeout","destroyed","start","ref","modules","effect","grabCursor","centeredSlides","slidesPerView","loop","loopedSlides","Math","min","length","freeMode","enabled","momentum","delay","disableOnInteraction","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","touchRatio","threshold","resistance","resistanceRatio","touchStartPreventDefault","className","onSlideChange","activeSlide","realIndex","_id","children","map","slide","onClick","src","previewImg","alt","title","draggable","onLoad"],"sources":["C:/Users/sonic/OneDrive/Documents/FInal Version(Hopefully) for stella site/stellabelessimovies/src/components/MovieSwiper.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './movieSwiper.css';\r\nimport 'swiper/css';\r\nimport 'swiper/css/effect-coverflow';\r\nimport 'swiper/css/free-mode';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport { Autoplay, EffectCoverflow, FreeMode } from 'swiper/modules';\r\n\r\nfunction MovieSwiper({ slides, slideChange, isModalOpen }) {\r\n  const [loadedSlides, setLoadedSlides] = useState({});\r\n  const swiperRef = useRef(null);\r\n\r\n  // Mark slide as loaded\r\n  const handleImageLoad = (id) => {\r\n    setLoadedSlides(prev => ({ ...prev, [id]: true }));\r\n  };\r\n\r\n  // Control autoplay based on modal state\r\n  useEffect(() => {\r\n    if (swiperRef.current && swiperRef.current.swiper) {\r\n      const swiper = swiperRef.current.swiper;\r\n      if (isModalOpen) {\r\n        swiper.autoplay.stop();\r\n      } else {\r\n        // Small delay to ensure modal is fully closed before resuming\r\n        setTimeout(() => {\r\n          if (swiper.autoplay && !swiper.destroyed) {\r\n            swiper.autoplay.start();\r\n          }\r\n        }, 100);\r\n      }\r\n    }\r\n  }, [isModalOpen]);\r\n\r\n  return (\r\n    <Swiper\r\n      ref={swiperRef}\r\n      modules={[EffectCoverflow, Autoplay, FreeMode]}\r\n      effect=\"coverflow\"\r\n      grabCursor={true}\r\n      centeredSlides={true}\r\n      slidesPerView=\"auto\"\r\n      loop={true}\r\n      loopedSlides={Math.min(slides.length, 10)}\r\n      freeMode={{ enabled: true, momentum: true }}\r\n      autoplay={{ delay: 2500, disableOnInteraction: false }}\r\n      coverflowEffect={{ rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: true }}\r\n      touchRatio={1}\r\n      threshold={10}\r\n      resistance={true}\r\n      resistanceRatio={0.85}\r\n      touchStartPreventDefault={false}\r\n      className=\"movieSwiper\"\r\n      onSlideChange={(swiper) => {\r\n        const activeSlide = slides[swiper.realIndex];\r\n        if (activeSlide) slideChange(activeSlide._id);\r\n      }}\r\n    >\r\n      {slides.map((slide) => (\r\n        <SwiperSlide key={slide._id}>\r\n          <div\r\n            className=\"slide-content\"\r\n            onClick={() => slideChange(slide._id)}\r\n          >\r\n            <img\r\n              src={slide.previewImg}\r\n              alt={slide.title || 'Preview'}\r\n              draggable={false}\r\n              onLoad={() => handleImageLoad(slide._id)}\r\n              className={loadedSlides[slide._id] ? 'loaded' : 'loading'}\r\n            />\r\n          </div>\r\n        </SwiperSlide>\r\n      ))}\r\n    </Swiper>\r\n  );\r\n}\r\n\r\nexport default MovieSwiper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}